#include <vector>
#include <iostream>

using namespace std;



struct TreeNode {
     int val;
     TreeNode *left;
     TreeNode *right;
     TreeNode() : val(0), left(nullptr), right(nullptr) {}
     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:

    static TreeNode* findLowestNode(TreeNode* root){
        while(root->left!= nullptr){
            root=root->left;
        }
        return root;
    }

    TreeNode* trimBST(TreeNode* root, int low, int high){
        if(root== nullptr)
            return nullptr;

        root->right = trimBST(root->right,low,high);
        root->left = trimBST(root->left,low,high);

        if(root->right == nullptr && root->left== nullptr && (root->val>high || root->val<low))
            return nullptr;

        if(root->val>high || root->val<low){
            if(root->left== nullptr)
                return root->right;
            if(root->right== nullptr)
                return root->left;

            TreeNode* lowest = findLowestNode(root->right);
            lowest->left=root->left;
            return root->right;
        }
        return root;
    }
};

int main(){
    Solution sol;
    TreeNode root = TreeNode(1);
    TreeNode right = TreeNode(2);
    TreeNode left = TreeNode(0);

    root.right=&right;
    root.left=&left;

    TreeNode* res=sol.trimBST(&root,1,2);
    std::cout << res;
    return 0;
}
